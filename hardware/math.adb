package body Math is

   type Table_Range is range 0 .. 63;
   type Math_Table_Array is array (Table_Range) of Float;


   Cosine_Table : constant Math_Table_Array :=
     (1.0, 0.9987954562051724, 0.9951847266721969, 0.989176509964781,
      0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208,
      0.9238795325112867, 0.9039892931234433, 0.881921264348355, 0.8577286100002721,
      0.8314696123025452, 0.8032075314806449, 0.773010453362737, 0.7409511253549591,
      0.7071067811865476, 0.6715589548470183, 0.6343932841636455, 0.5956993044924335,
      0.5555702330196023, 0.5141027441932217, 0.4713967368259978, 0.4275550934302822,
      0.38268343236508984, 0.33688985339222005, 0.29028467725446233, 0.24298017990326398,
      0.19509032201612833, 0.14673047445536175, 0.09801714032956077, 0.049067674327418126,
      0.0, -0.04906767432741801, -0.09801714032956065, -0.14673047445536164,
      -0.1950903220161282, -0.24298017990326387, -0.29028467725446216, -0.33688985339221994,
      -0.3826834323650897, -0.42755509343028186, -0.4713967368259977, -0.5141027441932217,
      -0.555570233019602, -0.5956993044924334, -0.6343932841636454, -0.6715589548470184,
      -0.7071067811865475, -0.7409511253549589, -0.773010453362737, -0.8032075314806448,
      -0.8314696123025453, -0.857728610000272, -0.8819212643483549, -0.9039892931234433,
      -0.9238795325112867, -0.9415440651830207, -0.9569403357322088, -0.970031253194544,
      -0.9807852804032304, -0.989176509964781, -0.9951847266721968, -0.9987954562051724);



   Arccosine_Table : constant Math_Table_Array :=
     (1.5707963267948966, 1.5551706909421597, 1.5395412382954015, 1.5239041436616148,
      1.5082555649984053, 1.4925916348601422, 1.47690845168738, 1.4612020708843627,
      1.4454684956268313, 1.4297036673390027, 1.4139034557744354, 1.3980636486304232,
      1.3821799406194926, 1.366247921914345, 1.3502630658740633, 1.3342207159493538,
      1.318116071652818, 1.3019441734664257, 1.2856998865421505, 1.2693778830327132,
      1.252972622867016, 1.2364783327585283, 1.2198889832038156, 1.203198263191621,
      1.1863995522992576, 1.169485889801056, 1.1524499403514286, 1.1352839557304628,
      1.1179797320499711, 1.1005285617089267, 1.0829211792546036, 1.0651477001435001,
      1.0471975511965979, 1.0290593912966945, 1.0107210205683146, 0.992169275895797,
      0.9733899101495465, 0.9543674518731895, 0.9350850413935945, 0.9155242382939545,
      0.895664793857865, 0.8754843803381285, 0.8549582665697854, 0.8340589263052528,
      0.8127555613686607, 0.791013515814583, 0.7687935489912782, 0.7460509236094209,
      0.7227342478134157, 0.6987839849677382, 0.6741305066673152, 0.6486915053278506,
      0.6223684885550206, 0.595041922827544, 0.5665643306210781, 0.5367501772287113,
      0.5053605102841573, 0.4720785854772848, 0.4364690287349193, 0.3979044930266904,
      0.3554212016902235, 0.3073950510845034, 0.2506556623361308, 0.17700768628803093);



   function modo (X, M : Float) return Float is
      Temp : Float := X;
   begin
      while Temp > M loop
         Temp := Temp - M;
      end loop;
      return Temp;
   end modo;

   -- TODO: not ceiling but rounding

   function ceiling (X : Float) return Float is
   begin
      return ( X - modo(X, 1.0) );
   end ceiling;


   function toIndex( X : Float ) return Table_Range is
   begin
      return Table_Range (ceiling(X)) ;
   end toIndex;


   function Cos (X : Float) return Float is
      Temp : Float := modo(X, 2.0*Pi);
   begin
      if Temp > Pi then
         return -Cosine_Table( toIndex(( (Pi-modo(Temp, Pi))) * 64.0 / Pi));
      else
         return Cosine_Table( toIndex(Temp * 64.0 / Pi));
      end if;
   end Cos;

   function Arccos (X : Float) return Float is
   begin
      if X < 1.0 then
         return (Pi/2.0)-Cosine_Table( toIndex(modo(-X, 1.0) * 64.0));
      else
         return Cosine_Table( toIndex(modo(X, 1.0) * 64.0));
      end if;
   end Arccos;

end Math;
